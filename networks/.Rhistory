with (gen_pop, abline(lm(genomeSize ~ popSize), col ="blue"))
install.packages("installr")
version
load("~/Desktop/Untitled.RData")
install.packages("bioconducor")
colnames(mat2) = unique(indv)
dim(mat2)
colnames(mat2) = unique(indv)
colMeans(mat5)
boxplot(mat5, las=2, col=7, ylab="Expression level")
install.packages(bioconductor)
install.packages("bioconductor")
library(preprocessCore)
version
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages("bioconductor")
biocLite("preprocessCore")
mat6 = normalize.quantiles(mat3)
library(preprocessCore)
mat6 = normalize.quantiles(mat3)
boxplot(mat6, las=2, col=5, ylab="Expression level")
colnames(mat6) = colnames(mat3)
rownames(mat6) = rownames(mat3)
head(mat6)
species2 = substr(colnames(mat5),1,2)
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
plot(hclust(dist(t(mat5))), main ="Scaling")
plot(hclust(dist(t(mat6))), main ="Quantile")
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink")
plot(hclust(dist(t(mat6))), main ="Quantile", col ="purple")
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink", horizontal = TRUE)
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink")
plot(hclust(dist(t(mat6))), main ="Quantile", col ="purple")
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink")
?hsclusy
?hsclust
?hclust
plot(hclust(dist(t(mat5))), main ="Scaling", col = species2)
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink")
plot(hclust(dist(t(mat6))), main ="Quantile", col ="purple")
plot(hclust(dist(t(mat5))), main ="Scaling", col = "pink")
###### Filtering ########
?substr
mat5(1,2)
mat5[1,2]
species2 = substr(colnames(mat6),1,2)
y = mat6[2,]
CUTOFF = 0.5
species2
filt = sapply(unique(species2), function(z){
# get unique species from the list of spp in species2
y_sp = y[ z == species2]
# [] it gives you a true false matrix where your element (z) is equal to species2
# y[] is taking the subset of you expression data based on that t/f matrix
proportionx = sum(y_sp > 0) / length(y_sp)
# sum gives you the number of ts in the t/f matrix. divided by the number of elements
# in that matrix.
# gives you a proportion of individuals that have above zero values in that individual
proportionx >= CUTOFF
# gives you T/F matrix again
})
det
filt
sum(filt)
sum(filt) == 3
pass = mat6[filt==TRUE]
pass
filt = sapply(unique(species2), function(z){
# get unique species from the list of spp in species2
y_sp = y[ z == species2]
# [z... ] it gives you a true false matrix where your element (z) is equal to species2
# y[z... ] is taking the subset of you expression data based on that t/f matrix
proportionx = sum(y_sp > 0) / length(y_sp)
# sum gives you the number of ts in the t/f matrix. divided by the number of elements
# in that matrix.
# gives you a proportion of individuals that have above zero values in that individual
proportionx >= CUTOFF
# gives you T/F matrix again
})
filt
#HS    PT    RM
#FALSE  TRUE  TRUE
sum(filt) == 3
# FALSE
pass = mat6[filt==TRUE]
head(pass)
mat6[2,]
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[ z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
proportionx >= CUTOFF
})
sum(filt) == 3
}
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[ z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
proportionx >= CUTOFF
})
sum(filt) == 3
}
defunc
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[ z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
proportionx >= CUTOFF
})
sum(filter) == 3
}
head(mat6)
defunc = function(p, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = p[ z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
proportionx >= CUTOFF
})
sum(filter) == 3
}
summary(filter)
sum(filter)
y
yada=1
yada
myFunction=function(x){
yada='string'
print(yada)
}
myFunction()
yada
defunc(mat6, CUTOFF)
filter
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
return(proportionx >= CUTOFF)
})
sum(filter) == 3
}
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
check = proportionx >= CUTOFF
return(check)
})
sum(check) == 3
}
defunc(mat6, CUTOFF)
defunc = function(y, CUTOFF){
filter = sapply(unique(species2), function(z){
y_sp = y[z == species2]
proportionx = sum(y_sp > 0) / length(y_sp)
proportionx >= CUTOFF
})
sum(filter) == 3
}
defunc(mat6, CUTOFF)
filter
defunc(mat6, CUTOFF)
apply(mat6, 1, function(y){}
wehopethisworks = apply(mat6, 1, function(y){
defunc(y, 0.5)}
)
wehopethisworks
length(wehopethisworks)
sum(wehopethisworks)
mat7 = mat6[wehopethisworks,]
dim(mat7)
nrow(mat7)/nrow(mat6)
(nrow(mat7)/nrow(mat6))
(nrow(mat7)/nrow(mat6)*100)
pca = prcomp(t(mat7, scale=T))
pca = prcomp(t(mat7), scale=T))
pca = prcomp(t(mat7), scale=T)
# scale = true: scales them to the same variance
wehopethisworks = apply(mat6, 1, defunc(y, 0.5))
wehopethisworks = apply(mat6, 1, function(y){
defunc(y, 0.5)})
save.image("~/Desktop/Untitled.RData")
summary(pca)
summary(pca)$imp[1:6]
pca
head(pca)
summary(pca)$imp[,1:6]
plot(pca$x[,1:2], col = [,1]
plot(pca$x[,1:2], col = [,1])
plot(pca$x[,1:2], col = pca$x[,1])
plot(pca$x[,1:2])
par(mfrow =c(1,1))
plot(pca$x[,1:2])
text(pc$x[,1:2], names(pc$x[,1]))
text(pc$x[,1:2], names(pca$x[,1]))
text(pca$x[,1:2], names(pca$x[,1]))
spcols =gsub("RM", 4, gsub("PT", 3, gsub("HS", 2, species2)))
plot(pca$x[,1:2], pch=19, col=spcols, cex=1.5)
legend(-10,10, c('Human', 'Chimp', 'Macaque'), fill = 2:4)
y = mat7[1,]
sex2 = substr(colnames(mat6),3,3)
boxplot(y~species2+sex2, col = 5:7)
aov(y~species2+sex2)
summary(aov(y~species2+sex2))
anova(aov(y~species2+sex2)$Pr[1:2])
anova(aov(y~species2+sex2))$Pr[1:2]
summary(aov(y~species2 * sex2))
# accounting for random effects
w = as.numeric(log2(mat[1,])+1)
summary(aov(w~species2 + sex2 + Error(indv)))
summary(aov(w~species + sex + Error(indv)))
mat7pval = apply(mat7, 2, function(y){
anova(aov(y~species2+sex2))$Pr[1:2]
})
mat7pval = apply(mat7, 1, function(y){
anova(aov(y~species2+sex2))$Pr[1:2]
})
dim(mat7pval)
mat7pval = t(mat7pval)
dim(mat7pval)
par(mrow=c(1,2))
par(mfrow=c(1,2))
hist(mat7pval[,'sp'], xlab = 'p', col = "pink", main = 'Sp')
hist(mat7pval[,'species'], xlab = 'p', col = "pink", main = 'Sp')
hist(mat7pval[,'sex'], xlab = 'p', col = "purple", main = 'Sex')
hist(mat7pval$Pr[1:2], xlab = 'p', col = "pink", main = 'Sp')
mat7pval
head(mat7pval)
y = mat7[i,]
boxplot(y~ species2, col=5:7, ylab='Expression')
i = which.min(mat7pval[,'species'])
i = which.min(mat7pval[,'sp'])
i = which.min(mat7pval[,"species"])
hist(mat7pval[,'sex'], xlab = 'p', col = "purple", main = 'Sex')
i = which.min(mat7pval[,'sex'])
i = which.min(mat7pval[,'sex'])
i
dim(mat7pval)
i = which.min(mat7pval[,"sp"])
colnames(mat7pval) = c('sp,', 'sex')
i = which.min(mat7pval[,"sp"])
colnames(mat7pval) = c('sp', 'sex')
i = which.min(mat7pval[,"sp"])
y = mat7[i,]
boxplot(y~ species2, col=5:7, ylab='Expression')
hist(mat7pval[,'sp'], xlab = 'p', col = "pink", main = 'Sp')
hist(mat7pval[,'sex'], xlab = 'p', col = "purple", main = 'Sex')
mat7pval_sp = p.adjust(mat7pval[,'sp'], 'BY')
mat7pval_sex = p.adjust(mat7pval[,'sex'], 'BY')
hist(mat7pval_sp, xlab = 'p', col = 'pink', main = 'Species')
hist(mat7pval_sex, xlab = 'p', col = 'purple', main = 'Sex')
boxplot(y~ species2, col=5:7, ylab='Expression')
hist(mat7pval[,'sp'], xlab = 'p', col = "pink", main = 'Sp')
hist(mat7pval[,'sex'], xlab = 'p', col = "purple", main = 'Sex')
hist(mat7pval[,'sp'], xlab = 'p', col = "pink", main = 'Sp')
hist(mat7pval_sp, xlab = 'p', col = 'pink', main = 'Species')
hist(mat7pval_sex, xlab = 'p', col = 'purple', main = 'Sex')
mat7pval_sp = p.adjust(mat7pval[,'sp'], 'BY')
head(mat7pval_sp)
head(mat7pval_sex)
dim(mat7pval_sex)
biocLite("DESeq")
library("DESeq")
conditions = data.frame(cbind(species2, sex2))
countmat = round(mat2[pass,])
?passs
?pass
cdsFull = newCountDataSet(countmat, conditions)
length(wehopethisworks)
sum(wehopethisworks)
pass2 = mat6[wehopethisworks==TRUE]
head(pass)
head(pass2)
length(pass2)
sum(wehopethisworks)
countmat = round(mat2[pass2,])
cdsFull = newCountDataSet(countmat, conditions)
z, conditions)
cdsFull = newCountDataSet(countmat, conditions)
View(table(row.names(mat2)))
View(table(row.names(pass2)))
View(pass2)
class(pass2)
length(pass2)
sum(wehopethisworks)
pass2 = mat6[wehopethisworks==TRUE]
head(pass2)
length(pass2)
countmat = round(mat2[pass2,])
cdsFull = newCountDataSet(countmat, conditions)
conditions = data.frame(cbind(species2, sex2))
# DEseq cant deal with tech reps so use mat2
# deseq wants integers, so we can use round
# remove rows with too many 0s, using "pass"
pass2
countmat = round(mat2[pass2,])
cdsFull = newCountDataSet(countmat, conditions)
head(pass2)
length(wehopethisworks)
sum(wehopethisworks)
countmat = round(mat2[wehopethisworks,])
cdsFull = newCountDataSet(countmat, conditions)
cdsFull = estimateSizeFactors(cds=Full)
cdsFull = estimateSizeFactors(cdsFull)
cdsFull = estimateDispersions(cdsFull)
fit1 = fitNbinomGLMs(cdsFull, count ~ species2 + sex2)
fit0 = fitNbinomGLMs(cdsFull, count ~ sex2)
pvalsGLM = nbinomGLMTest(fit1, fit0)
padjGLM = p.adjust(pvalsGLM, methods = "BY")
padjGLM = p.adjust(pvalsGLM, method = "BY")
hist(mat7pval_sp, xlab='q', col = "pink", main "SP aov")
hist(mat7pval_sp, xlab='q', col = "pink", main = "SP aov")
hist(padjGLM, xlab='q', col = "purple", main = "DEseq")
QCUT = 0.10
DE1 = rownames(mat7)[mat7pval_sp < QCUT]
DE2 = rownames(countmat)[padjGLM < QCUT]
x = list(DE1, DE2)
names(x) = c("aov", "DESeq")
par(mfrow = c(1,1))
venn(x)
?venn
install.packages("venndiagram")
install.packages("VennDiagram")
library("VennDiagram")
venn(x)
height = c(123,145,150,167,176)
weight = c(40,51,55,63,64)
rm(list =ls())
height = c(123,145,150,167,176)
weight = c(40,51,55,63,64)
plot(height, weight)
plot(height, weight, type ="l")
plot(height, weight, type ="b")
plot(height, weight, type ="n")
plot(height, weight, type ="l", lty = 'dashed')
plot(height, weight, type ="s")
attach(iris)
str(iris)
plot(Petal.Length, Sepal.Length)
plot(Petal.Length, Sepal.Length, xlab ="petal length", ylab ="sepal length"), main = "Petal/Sepal lengths graph")
plot(Petal.Length, Sepal.Length, xlab ="petal length", ylab ="sepal length"), main = "Petal/Sepal lengths graph")
plot(Petal.Length, Sepal.Length , xlab ="petal length" , ylab ="sepal length") , main = "Petal/Sepal lengths graph")
plot(Petal.Length, Sepal.Length , xlab ="petal length" , ylab ="sepal length") , main = "Petal/Sepal lengths graph")
plot(Petal.Length, Sepal.Length , xlab ="petal length" , ylab ="sepal length") , main = "Petal & Sepal lengths graph")
plot(Petal.Length, Sepal.Length)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph")
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col =5:7, pch =16)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col = Species, pch =16)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col =5:7, pch =16)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col = Species, pch =16)
legend(x=1.5, y=7.5, legend=levels(Species),col=1:3,pch=16)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col = Species, pch =a,b,c)
16)
plot(Petal.Length, Sepal.Length,xlab ="petal length",ylab ="sepal length",main = "Petal/Sepal lengths graph", col = Species, pch =16)
legend(x=1.5, y=7.5, legend=levels(Species),col=1:3,pch=16)
plot(Species, Sepal.Length)
plot(Sepal.Length ~ Species)
boxplot(Sepal.Length ~ Species)
plot(Sepal.Length ~ Species)
boxplot(Sepal.Length ~ Species)
boxplot(Sepal.Length ~ Species)
boxplot(Sepal.Length ~ Species, notch=T, col="yellow")
boxplot(Sepal.Length ~ Species, notch=T, col="yellow", horizontal=T)
hist(Sepal.Length)
hist(Sepal.Length, col="salmon")
linear = lm(Petal.Length ~ Sepal.Length)
anova(linear)
par(mfrow=c(2,2))
plot(linear, col ="salmon")
plot(linear, col ="Species")
plot(linear, col =Species)
plot(linear, col ="salmon")
plot(linear, col =Species)
par(mfrow=c(2,2))
plot(linear, col =Species)
par(mfrow=c(2,2))
plot(linear, col =Species)
linear = lm(Petal.Length ~ Species + Sepal.Length)
anova(linear)
plot(linear, col =Species)
par(mfrow=c(1,1))
xyplot(Sepal.Length~Petal.Length)
library(lattice)
xyplot(Sepal.Length~Petal.Length)
xyplot(Sepal.Length~Petal.Length, col =Species)
xyplot(Sepal.Length~Petal.Length | Species)
xyplot(Sepal.Length~Petal.Length | Petal.Width)
xyplot(Sepal.Length~Petal.Length | Petal.Width)
pca = prcomp([1:4], scale=T)
pca = prcomp(iris[1:4], scale=T)
xyplot(pca$x1)
pca$x1
pca$x[1]
pca$x[,1]
xyplot(pca$x[,1] ~ pca$x[,1] | Species)
xyplot(pca$x[,1] ~ pca$x[,2] | Species)
xyplot(pca$x[,2] ~ pca$x[,3] | Species)
xyplot(pca$x[,1] ~ pca$x[,3] | Species)
head(pca)
pca$rotation[,1]
pca$rotation[1,]
par(mfrow=c(2,2))
pca = prcomp(iris[1:4], scale=T)
xyplot(pca$x[,1] ~ pca$x[,2] | Species)
xyplot(pca$x[,2] ~ pca$x[,3] | Species)
xyplot(pca$x[,1] ~ pca$x[,3] | Species)
par(mfrow=c(2,2))
xyplot(pca$x[,1] ~ pca$x[,2] | Species)
xyplot(pca$x[,2] ~ pca$x[,3] | Species)
xyplot(pca$x[,1] ~ pca$x[,3] | Species)
?lattice
?trellis
?lattice
xyplot(pca$x[,1] ~ pca$x[,2] ~ pca$x[,3]| Species)
xyplot(pca$x[,1] ~ pca$x[,2] * pca$x[,3]| Species)
cloud(pca$x[,1] ~ pca$x[,2] * pca$x[,3]| Species)
cloud(pca$x[,1] ~ pca$x[,2] * pca$x[,3])
cloud(pca$x[,1] ~ pca$x[,2] ~ pca$x[,3])
cloud(pca$x[,1] ~ pca$x[,2] * pca$x[,3])
cloud(pca$x[,1] ~ pca$x[,2] * pca$x[,3], col = Species)
wireframe(pca$x[,1] ~ pca$x[,2] * pca$x[,3], col = Species)
wireframe(pca$x[,1] ~ pca$x[,2] * pca$x[,3])
wireframe(pca$x[,1] ~ pca$x[,2])
wireframe(pca$x[,1] ~ pca$x[,2] * pca$x[,3], dimension=3)
parallel(pca$x[,1] ~ pca$x[,2] * pca$x[,3], col = Species)
library(ggplot)
install.packages("ggplot")
bioclit("ggplot")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Sepal.Length,Petal.Length)
qplot(Sepal.Length,Petal.Length, col = Species)
qplot(Sepal.Length,Petal.Length, col = Species, size = Sepal.Width)
qplot(Sepal.Length,Petal.Length)
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =0.05)
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =0.05)
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.7), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch")
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =0.5)
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.7), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch")
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.5), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch")
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =0.5)
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.5), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch")
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.5), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch", geom=c("boxplot","jitter"))
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.5), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch", geom="boxplot")
qplot(Sepal.Length,Petal.Length, col = Species, size = Petal.Width, alpha =I(0.5), xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch", geom=c("boxplot","jitter"))
qplot(Sepal.Length,Petal.Length, col = Species, xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch", geom="boxplot")
qplot(Sepal.Length,Petal.Length, col = Species, xlab = "Sepal Length", ylab = "Petal Length", main ="Sepal vs Petal Length Biatch", geom=c("boxplot","jitter"))
graph = qplot(Sepal.Length, Petal.Length)
graph + geom_point(size=4, alpha =0.05)
graph+geom_point(shape = Species)
graph+geom_point(shape = Species)+theme_bw()
graph+geom_point(shape = Species)+theme_bw()+geom_smooth(method"lm")
graph+geom_point(shape = Species)+theme_bw()+geom_smooth(method="lm")
graph+geom_point(shape = Species)+theme_bw()+geom_smooth(method="loess")
graph+geom_point(shape = Species, col = "salmon")+theme_bw()+geom_smooth(method="loess")
graph+geom_point(col = "salmon")+theme_bw()+geom_smooth(method="loess")
graph+geom_point(col = Species)+theme_bw()+geom_smooth(method="loess")
graph+geom_point(col = Species)+theme_bw()+geom_smooth(method="loess")
graph+geom_point(shape = Species)+theme_bw()+geom_smooth(method="loess")
library(ggmap)
install.packages("ggmap")
library(ggmap)
clear
reset
rm(list=ls())
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
)
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
which R
version
getwd()
install.packages("/Documents/", repos = NULL, lib=.Library)
install.packages("~/Documents/", repos = NULL, lib=.Library)
install.packages("~/Documents/WGCNA_1.49.tgz", repos = NULL, lib=.Library)
library(WGCNA)
getwd()
setwd("/git/networks/")
setwd("~/git/Hairyballs/networks")
data = read.table("GSE77166_RNA-seq_expression_RPKM.txt.gz", sep ='\t', stringsAsFactors = F)
data = read.table("GSE77166_RNA-seq_expression_RPKM.txt", sep ='\t', stringsAsFactors = F)
data = read.table("GSE77166_RNA-seq_expression_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
head(data)
head(data)
view(read.table("GSE77166_RNA-seq_expression_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T))
read.table("GSE77166_RNA-seq_expression_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
getwd()
read.table("GSE77166_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
rm(ls=())
rm(list= ls())
data = read.table("GSE77166_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
data
setwd("/git/Hairyballs/networks")
setwd("/git/Hairyballs/networks/")
setwd("~/git/Hairyballs/networks")
data = read.table("GSE77166_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
data
data = read.table("GSE77166_RPKM.txt", sep ='\t', stringsAsFactors = F, headers = T)
data
data[,1]
